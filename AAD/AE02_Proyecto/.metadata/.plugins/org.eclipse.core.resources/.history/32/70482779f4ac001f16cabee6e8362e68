package model;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class CsvProcessor {
    private Connection connection;

    public CsvProcessor(Connection connection) {
        this.connection = connection;
    }

    public List<String[]> readCsv(String filePath) throws IOException {
        List<String[]> rows = new ArrayList<>();
        try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
            String line;
            boolean firstLine = true;
            
            while ((line = br.readLine()) != null) {
                if (firstLine) {
                    firstLine = false;
                    continue;
                }
                String[] values = line.split(",");
                
                if (values.length < 8) {
                    System.out.println("Fila con datos incompletos: " + line);
                    continue;
                }
                
                rows.add(values);
            }
        }
        return rows;
    }

    public void createPopulationTable(String[] header) {
        String createTableSQL = "CREATE TABLE IF NOT EXISTS Population (" +
                                "country VARCHAR(100), " +
                                "population INT, " +
                                "density INT, " +
                                "area INT, " +
                                "fertility DOUBLE, " +
                                "age INT, " +
                                "urban VARCHAR(10), " +
                                "share DOUBLE)";
        try (Statement stmt = connection.createStatement()) {
            stmt.executeUpdate(createTableSQL);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public void insertRowToDatabase(String[] row) {
        String insertSQL = "INSERT INTO Population (country, population, density, area, fertility, age, urban, share) " +
                           "VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
        try (PreparedStatement pstmt = connection.prepareStatement(insertSQL)) {
            pstmt.setString(1, row[0]);
            pstmt.setInt(2, Integer.parseInt(row[1]));
            pstmt.setInt(3, Integer.parseInt(row[2]));
            pstmt.setInt(4, Integer.parseInt(row[3]));
            pstmt.setDouble(5, Double.parseDouble(row[4]));
            pstmt.setInt(6, Integer.parseInt(row[5]));
            pstmt.setString(7, row[6]);
            pstmt.setDouble(8, Double.parseDouble(row[7]));
            pstmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public String processCsv(String filePath) throws IOException {
        List<String[]> rows = readCsv(filePath);
        
        StringBuilder concatenatedXmlContent = new StringBuilder();
        for (int i = 0; i < rows.size(); i++) {
            String[] row = rows.get(i);
            if (row.length >= 8) {
                concatenatedXmlContent.append(generateXmlContent(row));
            }
        }
        return concatenatedXmlContent.toString();
    }

    public String generateXmlContent(String[] row) {
        if (row.length < 8) {
            throw new IllegalArgumentException("Fila con datos incompletos: " + String.join(",", row));
        }

        String xmlContent = "<person>";
        xmlContent += "<country>" + row[0] + "</country>";
        xmlContent += "<population>" + row[1] + "</population>";
        xmlContent += "<density>" + row[2] + "</density>";
        xmlContent += "<area>" + row[3] + "</area>";
        xmlContent += "<fertility>" + row[4] + "</fertility>";
        xmlContent += "<age>" + row[5] + "</age>";
        xmlContent += "<urban>" + row[6] + "</urban>";
        xmlContent += "<share>" + row[7] + "</share>";
        xmlContent += "</person>";

        return xmlContent;
    }
}
