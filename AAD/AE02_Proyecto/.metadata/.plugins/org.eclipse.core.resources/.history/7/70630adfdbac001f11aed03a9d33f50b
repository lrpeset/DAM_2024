package model;

import java.io.*;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class CsvProcessor {
	private Connection connection;

	public CsvProcessor(Connection connection) {
		this.connection = connection;
	}

	public List<String[]> readCsv(String csvFilePath) throws IOException {
		List<String[]> rows = new ArrayList<>();
		try (BufferedReader reader = new BufferedReader(new InputStreamReader(
				getClass().getClassLoader().getResourceAsStream(csvFilePath), StandardCharsets.UTF_8))) {
			String line;
			while ((line = reader.readLine()) != null) {
				rows.add(line.split("\t"));
			}
		}
		return rows;
	}

	public void createPopulationTable(String[] headers) throws SQLException {
		String dropTable = "DROP TABLE IF EXISTS population";
		StringBuilder createTable = new StringBuilder("CREATE TABLE population (");

		for (String header : headers) {
			createTable.append(header.trim()).append(" VARCHAR(30), ");
		}
		createTable.deleteCharAt(createTable.lastIndexOf(","));
		createTable.append(")");

		try (PreparedStatement dropStmt = connection.prepareStatement(dropTable);
				PreparedStatement createStmt = connection.prepareStatement(createTable.toString())) {
			dropStmt.execute();
			createStmt.execute();
		}
	}

	public void insertRowToDatabase(String[] row) throws SQLException {
		String sql = "INSERT INTO population VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
		try (PreparedStatement statement = connection.prepareStatement(sql)) {
			for (int i = 0; i < row.length; i++) {
				statement.setString(i + 1, row[i].trim());
			}
			statement.executeUpdate();
		}
	}
}
