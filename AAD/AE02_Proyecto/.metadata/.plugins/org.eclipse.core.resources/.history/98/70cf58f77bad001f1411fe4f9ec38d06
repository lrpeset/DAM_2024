package controller;

import model.CsvProcessor;
import model.RegisterModel;
import view.MainAdminView;

import javax.swing.*;
import java.io.File;
import java.sql.Connection;
import java.util.List;

public class MainAdminController {
    private MainAdminView adminView;
    private CsvProcessor csvProcessor;
    private RegisterModel registerModel;

    public MainAdminController(MainAdminView adminView, Connection connection) {
        this.adminView = adminView;
        this.csvProcessor = new CsvProcessor(connection);
        this.registerModel = new RegisterModel(connection);

        this.adminView.getImportCsvButton().addActionListener(e -> handleImportCsv());
        this.adminView.getRegisterUserButton().addActionListener(e -> handleRegisterUser());
    }

    private void handleImportCsv() {
        try {
            JFileChooser fileChooser = new JFileChooser();
            int result = fileChooser.showOpenDialog(adminView);

            if (result == JFileChooser.APPROVE_OPTION) {
                File selectedFile = fileChooser.getSelectedFile();
                List<String[]> rows = csvProcessor.readCsv(selectedFile.getAbsolutePath());

                csvProcessor.createPopulationTable();

                for (String[] row : rows) {
                    csvProcessor.insertRowToDatabase(row);
                }

                JOptionPane.showMessageDialog(adminView, "CSV importado correctamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(adminView, "Error al importar el CSV: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void handleRegisterUser() {
        JTextField usernameField = new JTextField();
        JPasswordField passwordField = new JPasswordField();

        Object[] message = {
            "Usuario:", usernameField,
            "Contraseña:", passwordField
        };

        int option = JOptionPane.showConfirmDialog(adminView, message, "Registrar Nuevo Usuario", JOptionPane.OK_CANCEL_OPTION);
        if (option == JOptionPane.OK_OPTION) {
            String username = usernameField.getText();
            String password = new String(passwordField.getPassword());

            if (username.isEmpty() || password.isEmpty()) {
                JOptionPane.showMessageDialog(adminView, "El nombre de usuario y la contraseña no pueden estar vacíos.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            String hashedPassword = hashPassword(password);

            try {
                boolean isRegistered = registerModel.registerUser(username, hashedPassword);
                if (isRegistered) {
                    JOptionPane.showMessageDialog(adminView, "Usuario registrado correctamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(adminView, "Error al registrar al usuario. Intente nuevamente.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } catch (Exception ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(adminView, "Error al registrar al usuario: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private String hashPassword(String password) {
        try {
            java.security.MessageDigest md = java.security.MessageDigest.getInstance("MD5");
            byte[] array = md.digest(password.getBytes());
            StringBuilder sb = new StringBuilder();
            for (byte b : array) {
                sb.append(String.format("%02x", b));
            }
            return sb.toString();
        } catch (Exception e) {
            throw new RuntimeException("Error al cifrar la contraseña", e);
        }
    }

    public void start() {
        adminView.setVisible(true);
    }
}
