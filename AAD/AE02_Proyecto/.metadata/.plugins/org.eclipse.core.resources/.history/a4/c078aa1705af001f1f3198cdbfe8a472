package model;

import utils.Authentication;
import utils.CsvProcessor;
import utils.XmlProcessor;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class AdminActions {
	private Connection connection;
	private CsvProcessor csvProcessor;
	private XmlProcessor xmlProcessor;

	public AdminActions(Connection connection) {
		this.connection = connection;
		this.csvProcessor = new CsvProcessor(connection);
		this.xmlProcessor = new XmlProcessor();
	}

	public boolean registerUser(User adminUser, User newUser) {
		if (!adminUser.getUserType().equals("admin")) {
			return false;
		}

		String query = "INSERT INTO users (login, password, type) VALUES (?, ?, ?)";
		try (PreparedStatement stmt = connection.prepareStatement(query)) {
			stmt.setString(1, newUser.getUsername());
			stmt.setString(2, Authentication.hashPassword(newUser.getHashedPassword()));
			stmt.setString(3, newUser.getUserType());
			return stmt.executeUpdate() > 0;
		} catch (SQLException e) {
			e.printStackTrace();
			return false;
		}
	}

	public String processCsvAndGenerateXml(String csvFilePath) throws Exception {
		clearPopulationTable();
		List<String[]> rows = csvProcessor.readCsv(csvFilePath);

		StringBuilder xmlContent = new StringBuilder();
		for (String[] row : rows) {
	        csvProcessor.insertRowToDatabase(row);
			String xml = xmlProcessor.generateXmlContent(row);
			String country = row[0];
			xmlProcessor.generateXmlFile(country, xml);
			xmlContent.append(String.join(", ", row)).append("\n");
		}
		return xmlContent.toString();
	}
	
	private void clearPopulationTable() throws SQLException {
	    String deleteSQL = "DELETE FROM population";
	    try (Statement stmt = connection.createStatement()) {
	        stmt.executeUpdate(deleteSQL);
	    } catch (SQLException e) {
	        e.printStackTrace();
	        throw new RuntimeException("Error al limpiar la tabla population.", e);
	    }
	}

	public List<String[]> executeSelectQuery(String query, String userType) throws Exception {
        if ("client".equals(userType) && !query.toLowerCase().contains("from population")) {
            throw new IllegalAccessException("Los usuarios tipo 'client' solo pueden consultar la tabla 'population'.");
        }

        try (Statement stmt = connection.createStatement();
             ResultSet rs = stmt.executeQuery(query)) {

            int columnCount = rs.getMetaData().getColumnCount();
            List<String[]> results = new ArrayList<>();

            String[] headers = new String[columnCount];
            for (int i = 1; i <= columnCount; i++) {
                headers[i - 1] = rs.getMetaData().getColumnName(i);
            }
            results.add(headers);

            while (rs.next()) {
                String[] row = new String[columnCount];
                for (int i = 1; i <= columnCount; i++) {
                    row[i - 1] = rs.getString(i);
                }
                results.add(row);
            }

            return results;
        }
	}
}
