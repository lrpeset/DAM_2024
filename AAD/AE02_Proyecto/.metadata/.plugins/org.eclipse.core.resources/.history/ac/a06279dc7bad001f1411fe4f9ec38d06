package model;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class LoginModel {
    private Connection connection;

    public LoginModel(Connection connection) {
        this.connection = connection;
    }

    // Método para autenticar al usuario
    public boolean authenticate(String username, String password) {
        String passwordHash = hashPassword(password);  // Convierte la contraseña a MD5
        // Aquí se verifica la autenticación usando el hash
        return checkCredentials(username, passwordHash);
    }

    // Método para comprobar las credenciales
    private boolean checkCredentials(String username, String passwordHash) {
        String query = "SELECT * FROM users WHERE username = ? AND password = ?";
        try (PreparedStatement stmt = connection.prepareStatement(query)) {
            stmt.setString(1, username);
            stmt.setString(2, passwordHash);
            ResultSet resultSet = stmt.executeQuery();

            return resultSet.next();  // Si hay resultados, las credenciales son correctas
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }

    // Método para obtener el tipo de usuario
    public String getUserType(String username) {
        String query = "SELECT type FROM users WHERE username = ?";
        try (PreparedStatement stmt = connection.prepareStatement(query)) {
            stmt.setString(1, username);
            ResultSet resultSet = stmt.executeQuery();

            if (resultSet.next()) {
                return resultSet.getString("type");  // Retorna el tipo de usuario (admin o client)
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }

    // Método para hashear la contraseña en MD5
    public static String hashPassword(String password) {
        try {
            MessageDigest md = MessageDigest.getInstance("MD5");
            md.update(password.getBytes());
            byte[] bytes = md.digest();
            StringBuilder sb = new StringBuilder();
            for (byte b : bytes) {
                sb.append(String.format("%02x", b)); // Convierte cada byte a formato hexadecimal
            }
            return sb.toString();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return null;
    }
}
