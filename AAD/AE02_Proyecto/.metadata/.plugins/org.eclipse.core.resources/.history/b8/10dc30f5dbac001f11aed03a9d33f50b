package controller;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.sql.Connection;
import java.util.List;

import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;

import model.CsvProcessor;
import model.XmlProcessor;
import view.MainView;
import view.RegisterView;

public class MainController {
	private MainView view;
	private Connection connection;

	public MainController(MainView view, Connection connection) {
		this.view = view;
		this.connection = connection;

		this.view.getRegisterButton().addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				showRegisterView();
			}
		});

		this.view.getImportCsvButton().addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				importCsv();
			}
		});
	}

	private void showRegisterView() {
		RegisterView registerView = new RegisterView(connection);
		RegisterController registerController = new RegisterController(registerView, connection);
		registerView.setVisible(true);
	}

	private void importCsv() {
		try {
			CsvProcessor csvProcessor = new CsvProcessor(connection);
			XmlProcessor xmlProcessor = new XmlProcessor();

			String csvFilePath = "resources.csv/archivo.csv";
			List<String[]> rows = csvProcessor.readCsv(csvFilePath);

			csvProcessor.createPopulationTable(rows.get(0));

			StringBuilder concatenatedXmlContent = new StringBuilder();
			for (int i = 1; i < rows.size(); i++) {
				String[] row = rows.get(i);
				String xmlContent = xmlProcessor.generateXmlContent(row);
				concatenatedXmlContent.append(xmlContent).append("\n");

				xmlProcessor.generateXmlFile(row[0], xmlContent);
			}

			JTextArea textArea = new JTextArea(concatenatedXmlContent.toString());
			JScrollPane scrollPane = new JScrollPane(textArea);
			JOptionPane.showMessageDialog(null, scrollPane, "Contenido XML", JOptionPane.INFORMATION_MESSAGE);

			File[] xmlFiles = xmlProcessor.getOrCreateXmlDirectory().listFiles((dir, name) -> name.endsWith(".xml"));
			if (xmlFiles != null) {
				for (File xmlFile : xmlFiles) {
					String[] row = xmlProcessor.parseXmlContent(xmlFile);
					csvProcessor.insertRowToDatabase(row);
				}
			}

			JOptionPane.showMessageDialog(view, "Importación completada exitosamente.", "Éxito",
					JOptionPane.INFORMATION_MESSAGE);

		} catch (Exception ex) {
			ex.printStackTrace();
			JOptionPane.showMessageDialog(view, "Error al importar el CSV: " + ex.getMessage(), "Error",
					JOptionPane.ERROR_MESSAGE);
		}
	}
}
