package view;

import javax.swing.*;
import java.awt.*;
import java.util.List;
import java.util.function.Function;

/**
 * Clase que representa la vista del panel de cliente.
 * Esta clase extiende JFrame y proporciona una interfaz gráfica de usuario para la interacción del cliente.
 * Incluye botones para realizar consultas SQL, exportar CSV, iniciar sesión y cerrar sesión,
 * y mostrar mensajes e información relevante al usuario.
 */
public class ClientView extends JFrame {

    private final JButton sqlQueryButton;
    private final JButton exportCsvButton;
    private final JButton logoutButton;
    private final JLabel messageLabel;
    private final JButton loginButton;

    /**
     * Constructor de la clase ClientView.
     * Configura la interfaz gráfica, añadiendo los componentes como botones y etiquetas.
     */
    public ClientView() {
        setTitle("Panel de Administrador");
        setSize(600, 400);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setLayout(new BorderLayout());

        sqlQueryButton = new JButton("Hacer Consulta SQL");
        exportCsvButton = new JButton("Exportar CSV");
        logoutButton = new JButton("Logout");
        loginButton = new JButton("Login");

        JPanel buttonPanel = new JPanel();
        buttonPanel.add(sqlQueryButton);
        buttonPanel.add(logoutButton);
        buttonPanel.add(loginButton);

        add(buttonPanel, BorderLayout.NORTH);

        messageLabel = new JLabel(" ");
        add(messageLabel, BorderLayout.SOUTH);

        loginButton.setVisible(false);
    }

    /**
     * Obtiene el botón para realizar consultas SQL.
     *
     * @return El botón para consultas SQL.
     */
    public JButton getSqlQueryButton() {
        return sqlQueryButton;
    }

    /**
     * Muestra un mensaje en la interfaz gráfica.
     *
     * @param message El mensaje que se quiere mostrar.
     */
    public void showMessage(String message) {
        messageLabel.setText(message);
    }

    /**
     * Obtiene el botón para exportar datos a CSV.
     *
     * @return El botón para exportar CSV.
     */
    public JButton getExportCsvButton() {
        return exportCsvButton;
    }

    /**
     * Obtiene el botón para cerrar sesión.
     *
     * @return El botón para cerrar sesión.
     */
    public JButton getLogoutButton() {
        return logoutButton;
    }

    /**
     * Obtiene el botón para iniciar sesión.
     *
     * @return El botón para iniciar sesión.
     */
    public JButton getLoginButton() {
        return loginButton;
    }

    /**
     * Muestra u oculta los botones de inicio de sesión y cierre de sesión,
     * dependiendo del estado de autenticación del usuario.
     *
     * @param isLoggedIn Estado de autenticación del usuario (true si está autenticado, false si no).
     */
    public void toggleLoginLogout(boolean isLoggedIn) {
        logoutButton.setVisible(isLoggedIn);
        loginButton.setVisible(!isLoggedIn);
    }

    /**
     * Muestra los resultados de una consulta SQL en una nueva ventana con una tabla.
     * Si no hay resultados, se muestra un mensaje informando al usuario.
     *
     * @param results Los resultados de la consulta SQL, representados como una lista de arreglos de cadenas.
     */
    public void displayQueryResults(List<String[]> results) {
        if (results.isEmpty()) {
            showMessage("No se encontraron resultados.");
            return;
        }

        String[] headers = results.get(0);
        String[][] data = results.subList(1, results.size()).toArray(new String[0][]);

        JTable resultTable = new JTable(data, headers);
        JScrollPane scrollPane = new JScrollPane(resultTable);

        JFrame resultFrame = new JFrame("Resultados de la Consulta");
        resultFrame.setSize(800, 600);
        resultFrame.setLayout(new BorderLayout());

        JPanel buttonPanel = new JPanel();
        JButton backButton = new JButton("Atrás");

        buttonPanel.add(backButton);
        buttonPanel.add(exportCsvButton);

        resultFrame.add(scrollPane, BorderLayout.CENTER);
        resultFrame.add(buttonPanel, BorderLayout.SOUTH);

        resultFrame.setLocationRelativeTo(null);
        resultFrame.setVisible(true);

        backButton.addActionListener(e -> resultFrame.dispose());
    }

    /**
     * Añade los listeners para los botones de confirmar y regresar en la ventana de registro de usuario.
     * El listener de "confirmar" maneja la lógica de registro con los valores ingresados.
     *
     * @param frame     El JFrame de la ventana de registro de usuario.
     * @param onRegister Función que maneja el proceso de registro.
     */
    public void addRegisterUserListeners(JFrame frame, Function<String[], Boolean> onRegister) {
        JPanel buttonPanel = (JPanel) frame.getContentPane().getComponent(1);

        JButton confirmButton = (JButton) buttonPanel.getComponent(0);
        JButton backButton = (JButton) buttonPanel.getComponent(1);

        confirmButton.addActionListener(e -> {
            JPanel inputPanel = (JPanel) frame.getContentPane().getComponent(0);
            String login = ((JTextField) inputPanel.getComponent(1)).getText();
            String password = new String(((JPasswordField) inputPanel.getComponent(3)).getPassword());
            String confirmPassword = new String(((JPasswordField) inputPanel.getComponent(5)).getPassword());

            boolean success = onRegister.apply(new String[]{login, password, confirmPassword});
            if (success) frame.dispose();
        });

        backButton.addActionListener(e -> frame.dispose());
    }

    /**
     * Crea una ventana para registrar un nuevo usuario, incluyendo los campos de usuario,
     * contraseña y confirmación de contraseña, así como los botones correspondientes.
     *
     * @return El JFrame para registrar un nuevo usuario.
     */
    public JFrame createRegisterUserFrame() {
        JFrame frame = new JFrame("Registrar Nuevo Usuario");
        frame.setSize(400, 300);
        frame.setLayout(new BorderLayout());

        JPanel inputPanel = new JPanel(new GridLayout(3, 2));
        JTextField loginField = new JTextField();
        JPasswordField passwordField = new JPasswordField();
        JPasswordField confirmPasswordField = new JPasswordField();

        inputPanel.add(new JLabel("Usuario:"));
        inputPanel.add(loginField);
        inputPanel.add(new JLabel("Contraseña:"));
        inputPanel.add(passwordField);
        inputPanel.add(new JLabel("Confirmar Contraseña:"));
        inputPanel.add(confirmPasswordField);

        frame.add(inputPanel, BorderLayout.CENTER);

        JPanel buttonPanel = new JPanel();
        JButton confirmButton = new JButton("Confirmar");
        JButton backButton = new JButton("Atrás");
        buttonPanel.add(confirmButton);
        buttonPanel.add(backButton);

        frame.add(buttonPanel, BorderLayout.SOUTH);
        frame.setLocationRelativeTo(null);
        return frame;
    }

    /**
     * Muestra el contenido de un archivo XML en una ventana con un JTextArea.
     *
     * @param content El contenido del archivo XML.
     */
    public void displayXmlContent(String content) {
        JFrame frame = new JFrame("Contenido XML");
        JTextArea textArea = new JTextArea(content);
        textArea.setEditable(false);

        frame.add(new JScrollPane(textArea), BorderLayout.CENTER);
        frame.setSize(600, 400);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }
}
