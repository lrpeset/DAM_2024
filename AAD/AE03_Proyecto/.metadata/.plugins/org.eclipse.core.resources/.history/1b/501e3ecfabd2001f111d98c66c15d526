package com.blackjack.controller;

import com.blackjack.model.MongoDBManager;
import com.mongodb.client.MongoCollection;
import org.bson.Document;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Scanner;

public class AuthController {
    private final MongoCollection<Document> usersCollection;
    private String currentUser;

    public AuthController(MongoDBManager dbManager) {
        this.usersCollection = dbManager.getDatabase().getCollection("users");
    }

    public boolean registerUser(String username, String password, String confirmPassword) {
        if (!password.equals(confirmPassword)) {
            System.out.println("Error: Las contrase침as no coinciden.");
            return false;
        }

        if (isUserExists(username)) {
            System.out.println("Error: El usuario ya existe.");
            return false;
        }

        String hashedPassword = hashPassword(password);
        if (hashedPassword == null) return false;

        Document user = new Document("user", username).append("pass", hashedPassword);
        usersCollection.insertOne(user);
        System.out.println("Usuario registrado correctamente.");
        return true;
    }

    public boolean login(String username, String password) {
        String hashedPassword = hashPassword(password);
        Document user = usersCollection.find(new Document("user", username)).first();

        if (user != null && hashedPassword.equals(user.getString("pass"))) {
            currentUser = username;
            System.out.println("Inicio de sesi칩n exitoso.");
            return true;
        } else {
            System.out.println("Error: Credenciales incorrectas.");
            return false;
        }
    }

    public void logout() {
        currentUser = null;
        System.out.println("Sesi칩n cerrada.");
    }

    public String getCurrentUser() {
        return currentUser;
    }

    private boolean isUserExists(String username) {
        return usersCollection.find(new Document("user", username)).first() != null;
    }

    private String hashPassword(String password) {
        try {
            MessageDigest digest = MessageDigest.getInstance("SHA-256");
            byte[] encodedHash = digest.digest(password.getBytes());
            StringBuilder hexString = new StringBuilder();
            for (byte b : encodedHash) {
                String hex = Integer.toHexString(0xff & b);
                if (hex.length() == 1) hexString.append('0');
                hexString.append(hex);
            }
            return hexString.toString();
        } catch (NoSuchAlgorithmException e) {
            System.out.println("Error al generar el hash de la contrase침a.");
            return null;
        }
    }
}
