package com.blackjack.model;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.Base64;
import java.nio.file.Files;
import org.bson.Document;

public class CardLoader {

    private static final String PATH_ES = "img/card_es/";
    private static final String PATH_FR = "img/card_fr/";

    public static void main(String[] args) {
        loadCardsToDatabase(PATH_ES, "card_es");
        loadCardsToDatabase(PATH_FR, "card_fr");
    }

    private static void loadCardsToDatabase(String folderPath, String collectionName) {
        try {
            File folder = new File(folderPath);
            File[] files = folder.listFiles((dir, name) -> name.endsWith(".jpg"));
            
            if (files != null) {
                for (File file : files) {
                    String cardName = file.getName();
                    String base64Image = encodeImageToBase64(file);
                    Document cardDoc = createCardJson(cardName, base64Image, collectionName);
                    // Aquí puedes llamar al método para subir el documento a la base de datos
                    // subirAColeccionMongoDB(cardDoc, collectionName);
                    System.out.println(cardDoc.toJson());
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static String encodeImageToBase64(File file) throws IOException {
        FileInputStream fileInputStream = new FileInputStream(file);
        byte[] bytes = new byte[(int) file.length()];
        fileInputStream.read(bytes);
        return Base64.getEncoder().encodeToString(bytes);
    }

    private static Document createCardJson(String cardName, String base64Image, String collectionName) {
        String suit = "";
        int points = 0;
        
        // Lógica para asignar el palo y el valor de los puntos
        if (collectionName.equals("card_es")) {
            suit = getSpanishSuit(cardName);
            points = getSpanishCardPoints(cardName);
        } else if (collectionName.equals("card_fr")) {
            suit = getFrenchSuit(cardName);
            points = getFrenchCardPoints(cardName);
        }

        return new Document("suit", suit)
                .append("points", points)
                .append("base64", base64Image);
    }

    private static String getSpanishSuit(String cardName) {
        if (cardName.contains("bastos")) return "bastos";
        if (cardName.contains("copas")) return "copas";
        if (cardName.contains("espadas")) return "espadas";
        if (cardName.contains("oros")) return "oros";
        return "";
    }

    private static int getSpanishCardPoints(String cardName) {
        int points = 0;
        String number = cardName.split("_")[1];
        if (number.equals("01")) {
            points = 1;  // El As puede tener 1 o 11
        } else if (number.equals("10") || number.equals("11") || number.equals("12")) {
            points = 10;  // Las figuras valen 10
        } else {
            points = Integer.parseInt(number);  // Las demás cartas son su valor numérico
        }
        return points;
    }

    private static String getFrenchSuit(String cardName) {
        if (cardName.contains("clubs")) return "clubs";
        if (cardName.contains("diamonds")) return "diamonds";
        if (cardName.contains("hearts")) return "hearts";
        if (cardName.contains("spades")) return "spades";
        return "";
    }

    private static int getFrenchCardPoints(String cardName) {
        int points = 0;
        String number = cardName.split("_")[1];
        if (number.equals("01")) {
            points = 1;  // El As puede tener 1 o 11
        } else if (number.equals("11") || number.equals("12") || number.equals("13")) {
            points = 10;  // Las figuras valen 10
        } else {
            points = Integer.parseInt(number);  // Las demás cartas son su valor numérico
        }
        return points;
    }
}
