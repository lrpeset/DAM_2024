package com.blackjack.model;

import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import org.bson.Document;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.Objects;

public class ImageManager {
    private final MongoDatabase database;

    public ImageManager(MongoDatabase database) {
        this.database = database;
    }

    public void generateDeck(String deckName, String folderPath) throws IOException {
        MongoCollection<Document> collection = database.getCollection(deckName);
        collection.drop(); // Borra la colección si ya existe

        File folder = new File(folderPath);
        for (File file : Objects.requireNonNull(folder.listFiles())) {
            String base64Image = encodeImage(file);
            String suit = extractSuit(file.getName());
            int points = extractPoints(file.getName());

            Document card = new Document("suit", suit)
                    .append("points", points)
                    .append("base64", base64Image);

            collection.insertOne(card);
        }
    }

    private String encodeImage(File file) throws IOException {
        byte[] imageBytes = Files.readAllBytes(file.toPath());
        return java.util.Base64.getEncoder().encodeToString(imageBytes);
    }

    private String extractSuit(String fileName) {
        // Implementar lógica para extraer el palo según el nombre del archivo
        return "suit_placeholder";
    }

    private int extractPoints(String fileName) {
        // Implementar lógica para extraer los puntos según el nombre del archivo
        return 0;
    }
}
