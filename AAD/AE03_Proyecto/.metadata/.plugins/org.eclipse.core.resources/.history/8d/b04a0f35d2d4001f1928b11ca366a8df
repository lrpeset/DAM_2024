package com.blackjack.model;

import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import org.bson.Document;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.security.MessageDigest;
import java.util.ArrayList;
import java.util.Base64;
import java.util.HexFormat;
import java.util.List;

public class MongoDBManager {
    private MongoClient client;
    private MongoDatabase database;
    public String cardsEsCollection;
    public String cardsFrCollection;
    private String usersCollection;
    private String scoresCollection;

    private boolean cardsLoaded = false;  // Nueva variable de control

    public MongoDBManager(String configFile) throws Exception {
        String json = new String(Files.readAllBytes(Paths.get(configFile)));
        Document config = Document.parse(json);

        String ip = config.getString("ip");
        String port = config.getString("port");
        String databaseName = config.getString("database");

        String connectionString = String.format("mongodb://%s:%s/%s", ip, port, databaseName);
        client = MongoClients.create(connectionString);
        database = client.getDatabase(databaseName);

        Document collections = config.get("collections", Document.class);
        this.cardsEsCollection = collections.getString("cards_es");
        this.cardsFrCollection = collections.getString("cards_fr");
        this.usersCollection = collections.getString("users");
        this.scoresCollection = collections.getString("scores");

        System.out.println("Connected to database: " + databaseName);
        System.out.println("Using collections: ");
        System.out.println("  Spanish cards: " + cardsEsCollection);
        System.out.println("  French cards: " + cardsFrCollection);
        System.out.println("  Users: " + usersCollection);
        System.out.println("  Scores: " + scoresCollection);
    }

    // Método para cargar las cartas en las colecciones
    public void loadCardsIntoCollection(String cardSuit) {
        try {
            if (cardsLoaded) {
                System.out.println("Las cartas ya han sido cargadas previamente.");
                return;  // Si ya se han cargado, no se hace nada
            }

            // Verificar si la colección ya existe y eliminarla si es necesario
            List<String> existingCollections = database.listCollectionNames().into(new ArrayList<>());

            if (existingCollections.contains(cardsEsCollection)) {
                database.getCollection(cardsEsCollection).drop();
                System.out.println("Colección " + cardsEsCollection + " eliminada.");
            }

            if (existingCollections.contains(cardsFrCollection)) {
                database.getCollection(cardsFrCollection).drop();
                System.out.println("Colección " + cardsFrCollection + " eliminada.");
            }

            // Crear las nuevas colecciones
            String targetCollection = cardSuit.equalsIgnoreCase("ES") ? cardsEsCollection : cardsFrCollection;
            MongoCollection<Document> collection = database.getCollection(targetCollection);

            File folder = new File("img/" + (cardSuit.equalsIgnoreCase("ES") ? "cards_es" : "cards_fr"));
            if (!folder.exists() || !folder.isDirectory()) {
                throw new RuntimeException("La carpeta " + folder.getPath() + " no existe o no es un directorio.");
            }

            File[] files = folder.listFiles((dir, name) -> name.endsWith(".jpg") || name.endsWith(".png"));
            if (files == null || files.length == 0) {
                throw new RuntimeException("No se encontraron archivos de cartas en la carpeta " + folder.getPath());
            }

            for (File file : files) {
                String fileName = file.getName().replaceAll("\\.jpg$|\\.png$", "");
                String[] parts = fileName.split("_");

                if (parts.length != 2) {
                    throw new RuntimeException("Formato de archivo inválido: " + fileName);
                }

                String suit = parts[0];
                int points = Integer.parseInt(parts[1]);
                if (points > 10) {
                    points = 10;
                }

                String base64Image = encodeFileToBase64(file);

                Document card = new Document("suit", suit)
                    .append("points", points)
                    .append("base64", base64Image);

                collection.insertOne(card);
            }

            // Marcar que las cartas ya han sido cargadas
            cardsLoaded = true;
            System.out.println("Las cartas han sido cargadas en la colección: " + targetCollection);

        } catch (Exception e) {
            e.printStackTrace();
            throw new RuntimeException("Error al cargar cartas en la colección: " + e.getMessage());
        }
    }

    // Método para reiniciar las colecciones de cartas
    public void resetCardsCollection(String cardSuit) {
        try {
            cardsLoaded = false;  // Restablecer la bandera a false

            // Llamar a loadCardsIntoCollection para cargar las cartas
            loadCardsIntoCollection(cardSuit);
        } catch (Exception e) {
            e.printStackTrace();
            throw new RuntimeException("Error al reiniciar las colecciones de cartas: " + e.getMessage());
        }
    }

    // Método para codificar el archivo en base64
    private String encodeFileToBase64(File file) throws IOException {
        byte[] fileContent = Files.readAllBytes(file.toPath());
        return Base64.getEncoder().encodeToString(fileContent);
    }

    public MongoDatabase getDatabase() {
        return this.database;
    }
}
