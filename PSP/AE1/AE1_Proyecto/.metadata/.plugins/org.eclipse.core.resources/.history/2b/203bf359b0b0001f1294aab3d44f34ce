package simulador;

import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;

public class SimulacionMP {
    public static void main(String[] args) throws IOException {

        int tipo = Integer.parseInt(args[0]);
        String mode = args[1]; // calc o sleep
        realizarSimulacion(tipo, mode, 1);
    }

    public static void realizarSimulacion(int tipo, String mode, int index) throws IOException {
        long start = System.currentTimeMillis();
        double result = 0;

            result = simulationWithSleep(tipo); // Simulación con Thread.sleep

        long end = System.currentTimeMillis();

        String timestamp = getTimestamp(start);
        String fileName = "PROT_" + mode.toUpperCase() + "_" + tipo + "_n" + index + "_" + timestamp + ".sim";
        try (FileWriter writer = new FileWriter(fileName)) {
            writer.write(timestamp + "\n");
            writer.write(getTimestamp(end) + "\n");
            writer.write((end - start) / 1000.0 + "\n");
            writer.write(result + "\n");
        }
    }

    // Simulación con Thread.sleep
    public static double simulationWithSleep(int type) {
        double simulationTime = Math.pow(5, type);

        System.out.println("SimulaciónMP (sleep) iniciada. Tiempo objetivo: " + simulationTime + " ms");

        try {
            Thread.sleep((long) simulationTime);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        System.out.println("SimulaciónMP (sleep) completada. Tiempo transcurrido: " + simulationTime + " ms");
        return 0; // No hay cálculo, devuelve 0
    }

    public static String getTimestamp(long time) {
        return new SimpleDateFormat("yyyyMMdd_HHmmss_SSS").format(new Date(time));
    }
}
