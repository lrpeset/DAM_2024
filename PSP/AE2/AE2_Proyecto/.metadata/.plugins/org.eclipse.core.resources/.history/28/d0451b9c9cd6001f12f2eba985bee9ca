package es.psp.ae2;

import java.io.*;
import java.net.*;
import java.util.*;

public class ServerThread extends Thread {
    private Socket socket;
    private BufferedReader in;
    private PrintWriter out;
    private Map<String, List<ServerThread>> channels;
    private Set<String> users; // Colección para almacenar los nombres de usuario
    private String username;
    private String channel;

    public ServerThread(Socket socket, Map<String, List<ServerThread>> channels, Set<String> users) throws IOException {
        this.socket = socket;
        this.channels = channels;
        this.users = users;  // Inicializamos el conjunto de usuarios
        this.in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
        this.out = new PrintWriter(socket.getOutputStream(), true);
    }

    @Override
    public void run() {
        try {
            // Solicitar al cliente la selección de canal
            selectChannel();

            // Solicitar al cliente el nombre de usuario
            selectUsername();

            // Enviar mensaje de bienvenida al cliente
            out.println("¡Bienvenido al canal " + channel + ", " + username + "!");

            // Recibir y reenviar mensajes del cliente a los demás usuarios del canal
            String message;
            while ((message = in.readLine()) != null) {
                if ("exit".equalsIgnoreCase(message)) {
                    break; // Salir si el cliente envía "exit"
                }
                sendMessageToChannel(message);
            }

            // Cerrar la conexión al cliente
            disconnect();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void selectChannel() throws IOException {
        // Enviar lista de canales disponibles
        out.println("Selecciona un canal por su número:");
        out.println("Canales disponibles: " + channels.keySet());

        String choice = in.readLine().trim();
        // Asegurarse de que el canal elegido es válido
        if (!channels.containsKey(choice)) {
            out.println("Canal no válido. Conectando al canal por defecto.");
            choice = "1"; // Canal por defecto si la opción no es válida
        }
        channel = choice;

        // Añadir el hilo del cliente al canal seleccionado
        synchronized (channels) {
            channels.get(channel).add(this);
        }
    }

    private void selectUsername() throws IOException {
        boolean usernameExists;
        do {
            out.println("Introduce tu nombre de usuario:");
            username = in.readLine();
            
            synchronized (users) {
                usernameExists = users.contains(username);  // Comprobar si el usuario existe
            }
            
            if (usernameExists) {
                out.println("true");  // Indicar que el usuario ya existe
            } else {
                out.println("false");  // Nombre válido
            }
        } while (usernameExists);  // Continuar pidiendo el nombre si ya está en uso
        synchronized (users) {
            users.add(username);  // Registrar el nuevo usuario
        }
    }

    private void sendMessageToChannel(String message) {
        synchronized (channels) {
            for (ServerThread thread : channels.get(channel)) {
                thread.out.println(username + ": " + message);
            }
        }
    }

    private void disconnect() throws IOException {
        synchronized (channels) {
            channels.get(channel).remove(this); // Eliminar al cliente del canal
        }
        synchronized (users) {
            users.remove(username);  // Eliminar el nombre de usuario del conjunto
        }
        in.close();
        out.close();
        socket.close();
    }
}
