package es.psp.ae2;

import java.io.*;
import java.net.*;
import java.util.*;

public class ServerMain {
    private static final int PORT = 5000;
    private static final Map<Integer, String> channels = new HashMap<>();
    private static final Map<Integer, Set<String>> channelUsers = new HashMap<>();

    public static void main(String[] args) throws IOException {
        channels.put(1, "1-cine");
        channels.put(2, "2-música");
        channels.put(3, "3-videojuegos");
        channels.put(4, "4-literatura");

        ServerSocket serverSocket = new ServerSocket(PORT);
        System.out.println("Servidor iniciado en el puerto " + PORT);

        while (true) {
            Socket clientSocket = serverSocket.accept();
            System.out.println("Cliente conectado: " + clientSocket.getInetAddress());
            new ServerThread(clientSocket).start();
        }
    }

    static class ServerThread extends Thread {
        private final Socket clientSocket;
        private PrintWriter out;
        private BufferedReader in;
        private int selectedChannel = -1;
        private String username;

        public ServerThread(Socket clientSocket) {
            this.clientSocket = clientSocket;
        }

        @Override
        public void run() {
            try {
                in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
                out = new PrintWriter(clientSocket.getOutputStream(), true);

                // Enviar lista de canales
                for (Map.Entry<Integer, String> entry : channels.entrySet()) {
                    out.println(entry.getKey() + ". " + entry.getValue());
                }

                // Leer selección de canal
                selectedChannel = Integer.parseInt(in.readLine());
                if (channels.containsKey(selectedChannel)) {
                    out.println("Channel accepted");
                } else {
                    out.println("Channel not found");
                    clientSocket.close();
                    return;
                }

                // Gestionar nombre de usuario
                while (true) {
                    username = in.readLine();
                    if (isUsernameTaken(username)) {
                        out.println("true");
                    } else {
                        out.println("false");
                        addUserToChannel(username);
                        break;
                    }
                }

                // Manejar mensajes del cliente
                String message;
                while ((message = in.readLine()) != null) {
                    if (message.equals("exit")) {
                        removeUserFromChannel();
                        break;
                    }
                    broadcastMessage(message);
                }

            } catch (IOException e) {
                e.printStackTrace();
            } finally {
                try {
                    if (clientSocket != null) {
                        clientSocket.close();
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }

        private boolean isUsernameTaken(String username) {
            return channelUsers.getOrDefault(selectedChannel, new HashSet<>()).contains(username);
        }

        private void addUserToChannel(String username) {
            channelUsers.computeIfAbsent(selectedChannel, k -> new HashSet<>()).add(username);
        }

        private void removeUserFromChannel() {
            channelUsers.getOrDefault(selectedChannel, new HashSet<>()).remove(username);
        }

        private void broadcastMessage(String message) {
            Set<String> usersInChannel = channelUsers.getOrDefault(selectedChannel, new HashSet<>());
            for (String user : usersInChannel) {
                out.println("Mensaje de " + username + ": " + message);
            }
        }
    }
}
