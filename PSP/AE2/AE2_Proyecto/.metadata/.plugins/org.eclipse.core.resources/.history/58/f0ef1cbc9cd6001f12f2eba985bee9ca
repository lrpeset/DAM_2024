package es.psp.ae2;

import java.io.*;
import java.net.*;
import java.util.*;

public class ServerThread extends Thread {
    private Socket clientSocket;
    private PrintWriter out;
    private BufferedReader in;
    private Map<String, List<ServerThread>> channels;
    private String channel;
    private String username;

    public ServerThread(Socket clientSocket, Map<String, List<ServerThread>> channels) {
        this.clientSocket = clientSocket;
        this.channels = channels;
    }

    public void run() {
        try {
            // Establecer los streams de entrada y salida
            in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
            out = new PrintWriter(clientSocket.getOutputStream(), true);

            // Leer el nombre de usuario
            username = in.readLine();
            if (username == null || username.trim().isEmpty()) {
                out.println("false");
                return;
            }

            // Leer el canal al que se desea conectar
            channel = in.readLine();
            if (!channels.containsKey(channel)) {
                out.println("false");
                return;
            }

            // Agregar al cliente al canal
            channels.get(channel).add(this);
            out.println("Â¡Bienvenido al canal " + channel + ", " + username + "!");

            // Leer mensajes enviados por el cliente
            String message;
            while ((message = in.readLine()) != null) {
                if (message.equalsIgnoreCase("exit")) {
                    break;
                }
                // Enviar el mensaje a todos los clientes en el canal
                for (ServerThread client : channels.get(channel)) {
                    client.out.println(username + ": " + message);
                }
            }

        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                // Cerramos los streams y el socket
                if (in != null) in.close();
                if (out != null) out.close();
                if (clientSocket != null) clientSocket.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
}
