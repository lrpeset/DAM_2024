package es.psp.ae2;

import java.io.*;
import java.net.Socket;
import java.util.*;

public class ServerThread extends Thread {
    private Socket clientSocket;
    private PrintWriter out;
    private BufferedReader in;
    private Map<String, List<ServerThread>> channels;
    private Set<String> users;
    private String channel;
    private String username;

    public ServerThread(Socket clientSocket, Map<String, List<ServerThread>> channels, Set<String> users) {
        this.clientSocket = clientSocket;
        this.channels = channels;
        this.users = users;
    }

    @Override
    public void run() {
        try {
            in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
            out = new PrintWriter(clientSocket.getOutputStream(), true);

            // Solicitar nombre de usuario
            username = requestUsername();
            
            // Validar canal y agregar cliente
            channel = requestChannel();
            if (channels.containsKey(channel)) {
                synchronized (channels) {
                    channels.get(channel).add(this);
                }
                out.println("¡Bienvenido al canal " + channel + ", " + username + "!");
                handleMessages();
            } else {
                out.println("Canal no válido.");
            }

        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            cleanUp();
        }
    }

    private String requestUsername() throws IOException {
        String username;
        while (true) {
            out.println("Introduce tu nombre de usuario:");
            username = in.readLine();
            synchronized (users) {
                if (!users.contains(username)) {
                    users.add(username);
                    break;
                }
                out.println("El nombre de usuario ya está en uso. Por favor, introduce otro.");
            }
        }
        return username;
    }

    private String requestChannel() throws IOException {
        out.println("Selecciona un canal: ");
        return in.readLine();
    }

    private void handleMessages() throws IOException {
        String message;
        while ((message = in.readLine()) != null) {
            if (message.equalsIgnoreCase("exit")) break;
            synchronized (channels) {
                for (ServerThread client : channels.get(channel)) {
                    client.out.println(username + ": " + message);
                }
            }
        }
    }

    private void cleanUp() {
        try {
            if (in != null) in.close();
            if (out != null) out.close();
            if (clientSocket != null) clientSocket.close();
            synchronized (users) {
                users.remove(username);
            }
            synchronized (channels) {
                if (channels.containsKey(channel)) {
                    channels.get(channel).remove(this);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
