package es.psp.ae2;

import javax.swing.*;
import java.awt.*;
import java.io.*;
import java.net.*;
import java.util.*;
import java.util.List;

public class ClientMain {
    private static Socket socket;
    private static PrintWriter out;
    private static BufferedReader in;
    private static String channel;
    private static String username;

    public static void main(String[] args) throws IOException {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        
        // Conexión al servidor
        socket = connectToServer(reader);

        // Cargar y mostrar canales
        List<String> channels = loadChannels("src/channels.txt");
        displayChannels(channels);

        // Seleccionar canal
        channel = promptForChannel(reader);
        out.println(channel);

        // Gestionar nombre de usuario
        username = promptUsername(reader);
        out.println(username);

        // Recibir y mostrar mensaje de bienvenida
        System.out.println(in.readLine());

        // Iniciar la comunicación de mensajes
        promptForMessage(reader);
    }

    private static Socket connectToServer(BufferedReader reader) throws IOException {
        System.out.print("IP: ");
        String serverIP = reader.readLine().trim();
        System.out.print("Puerto: ");
        int serverPort = Integer.parseInt(reader.readLine().trim());

        Socket socket = new Socket(serverIP, serverPort);
        System.out.println("Conexión establecida con el servidor.");
        in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
        out = new PrintWriter(socket.getOutputStream(), true);
        return socket;
    }

    private static List<String> loadChannels(String fileName) throws IOException {
        List<String> channels = new ArrayList<>();
        try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {
            String line;
            while ((line = br.readLine()) != null) {
                channels.add(line.trim());
            }
        }
        return channels;
    }

    private static void displayChannels(List<String> channels) {
        String timestamp = String.format("%1$td/%1$tM-%1$tH:%1$tM:%1$tS", new Date());
        System.out.println(timestamp + ": Canales disponibles: " + channels);
    }

    private static String promptForChannel(BufferedReader reader) throws IOException {
        System.out.print("Selecciona un canal por su número (1-4): ");
        return reader.readLine().trim();
    }

    private static String promptUsername(BufferedReader reader) throws IOException {
        String username;
        boolean usernameTaken;
        do {
            System.out.print("Introduce tu nombre de usuario (sin espacios): ");
            username = reader.readLine().trim();
            out.println(username);
            usernameTaken = "true".equalsIgnoreCase(in.readLine());
            if (usernameTaken) {
                System.out.println("El usuario ya existe, elige otro nombre.");
            }
        } while (usernameTaken);
        return username;
    }

    private static void promptForMessage(BufferedReader reader) throws IOException {
        System.out.println("Pulsa 'Enter' para introducir mensajes");
        while (true) {
            String line = reader.readLine();
            if (line.isEmpty()) {
                openMessageInputDialog();
                break;
            }
        }
    }

    private static void openMessageInputDialog() {
        JFrame frame = new JFrame("Enviar mensaje");
        frame.setSize(400, 200);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        JPanel panel = new JPanel();
        frame.add(panel);
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));

        JTextField messageField = new JTextField();
        panel.add(new JLabel("Escribe tu mensaje:"));
        panel.add(messageField);

        JButton okButton = new JButton("OK");
        okButton.addActionListener(e -> {
            String message = messageField.getText();
            if (!message.isEmpty()) {
                out.println(message);
                System.out.println("Mensaje enviado: " + message);
            }
            frame.dispose();
        });
        panel.add(okButton);

        JButton cancelButton = new JButton("Cancelar");
        cancelButton.addActionListener(e -> frame.dispose());
        panel.add(cancelButton);

        frame.setVisible(true);
    }
}
