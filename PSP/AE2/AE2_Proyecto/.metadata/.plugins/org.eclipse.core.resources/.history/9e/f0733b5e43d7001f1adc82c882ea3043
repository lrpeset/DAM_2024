package es.psp.ae2;

import java.io.*;
import java.net.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;

public class ServidorHilo implements Runnable {
	private Socket clienteSocket;
	private BufferedReader input;
	private PrintWriter output;
	private Map<String, List<ServidorHilo>> canales;
	private String canalActual;
	private String nombreUsuario;

	public ServidorHilo(Socket clienteSocket, Map<String, List<ServidorHilo>> canales) {
		this.clienteSocket = clienteSocket;
		this.canales = canales;
	}

	@Override
	public void run() {
	    try {
	        input = new BufferedReader(new InputStreamReader(clienteSocket.getInputStream()));
	        output = new PrintWriter(clienteSocket.getOutputStream(), true);

	        output.println("Canales disponibles:");
	        List<String> canalList = new ArrayList<>(canales.keySet());
	        for (int i = 0; i < canalList.size(); i++) {
	            output.println((i + 1) + "- " + canalList.get(i));
	        }

	        output.println("Selecciona un canal (número):");
	        output.println("(Pulsa intro para abrir la ventana de mensajería)");
	        String canalSeleccionado = input.readLine().trim();

	        int canalIndice;
	        try {
	            canalIndice = Integer.parseInt(canalSeleccionado) - 1;
	            if (canalIndice < 0 || canalIndice >= canalList.size()) {
	                output.println("Canal no válido. Desconectando.");
	                cerrarConexion();
	                return;
	            }
	        } catch (NumberFormatException e) {
	            output.println("Entrada no válida. Por favor, ingresa un número válido.");
	            cerrarConexion();
	            return;
	        }

	        canalActual = canalList.get(canalIndice);

	        output.println("Introduce tu nombre de usuario:");
	        while (true) {
	            nombreUsuario = input.readLine();
	            synchronized (canales.get(canalActual)) {
	                boolean existe = canales.get(canalActual).stream()
	                        .anyMatch(hilo -> hilo.nombreUsuario.equals(nombreUsuario));
	                if (!existe) {
	                    canales.get(canalActual).add(this);
	                    break;
	                }
	            }
	            output.println("Nombre de usuario ya en uso. Por favor, elige otro:");
	        }

	        output.println("Conexión exitosa al canal: " + canalActual);
	        enviarATodos("Usuario " + nombreUsuario + " se ha unido al canal.");

	        String mensaje;
	        while ((mensaje = input.readLine()) != null) {
	            if (mensaje.equalsIgnoreCase("whois")) {
	                enviarATodos("Usuarios conectados al canal " + canalActual + ": " + obtenerUsuarios());
	            } else if (mensaje.equalsIgnoreCase("channels")) {
	                enviarATodos("Canales disponibles: " + canales.keySet());
	            } else if (mensaje.equalsIgnoreCase("exit")) {
	                enviarATodos("Usuario " + nombreUsuario + " ha abandonado el canal.");
	                desconectar();
	                break;
	            } else if (mensaje.startsWith("@canal")) {
	                String[] partes = mensaje.split(" ", 2);
	                if (partes.length == 2) {
	                    String canalDestino = partes[0].substring(7);
	                    String mensajeCanal = partes[1];
	                    enviarATodosCanal(canalDestino, mensajeCanal);
	                }
	            } else {
	                String timestamp = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
	                String mensajeFormateado = "[" + timestamp + "] " + nombreUsuario + ": " + mensaje;
	                enviarATodos(mensajeFormateado);
	            }
	        }
	    } catch (IOException e) {
	        System.err.println("Error con el cliente: " + e.getMessage());
	    } finally {
	        desconectar();
	    }
	}

	private String obtenerUsuarios() {
	    StringBuilder sb = new StringBuilder();
	    for (ServidorHilo hilo : canales.get(canalActual)) {
	        sb.append(hilo.nombreUsuario).append(", ");
	    }
	    return sb.length() > 0 ? sb.substring(0, sb.length() - 2) : "";
	}

	private void enviarATodosCanal(String canalDestino, String mensaje) {
	    synchronized (canales.get(canalDestino)) {
	        for (ServidorHilo hilo : canales.get(canalDestino)) {
	            hilo.output.println("[Canal " + canalDestino + "] " + mensaje);
	        }
	    }
	}


	private void enviarATodos(String mensaje) {
		synchronized (canales.get(canalActual)) {
			for (ServidorHilo hilo : canales.get(canalActual)) {
				hilo.output.println(mensaje);
			}
		}
	}

	private void desconectar() {
		try {
			synchronized (canales.get(canalActual)) {
				canales.get(canalActual).remove(this);
				enviarATodos("Usuario " + nombreUsuario + " ha abandonado el canal " + canalActual + ".");
			}
			cerrarConexion();
		} catch (Exception e) {
			System.err.println("Error al desconectar cliente: " + e.getMessage());
		}
	}

	private void cerrarConexion() throws IOException {
		if (clienteSocket != null)
			clienteSocket.close();
		if (input != null)
			input.close();
		if (output != null)
			output.close();
	}
}
