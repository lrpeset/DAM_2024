package es.psp.ae2;

import java.io.*;
import java.net.*;
import javax.swing.*;

public class Cliente {
    private Socket socket;
    private BufferedReader input;
    private PrintWriter output;

    public Cliente(String serverIp, int serverPort) {
        try {
            socket = new Socket(serverIp, serverPort);
            input = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            output = new PrintWriter(socket.getOutputStream(), true);

            System.out.println("Conectado al servidor en " + serverIp + ":" + serverPort);

            new Thread(new ClienteHilo(input)).start();
            enviarMensajes();
        } catch (IOException e) {
            System.err.println("Error al conectar al servidor: " + e.getMessage());
        }
    }

    private void enviarMensajes() {
        try {
            BufferedReader consoleInput = new BufferedReader(new InputStreamReader(System.in));
            
            // Paso 1: Selección de canal
            System.out.print("Selecciona un canal (número): ");
            String canalSeleccionado = consoleInput.readLine();
            output.println(canalSeleccionado); // Enviar selección al servidor
            
            // Paso 2: Introducir nombre de usuario
            System.out.print("Introduce tu nombre de usuario: ");
            String nombreUsuario = consoleInput.readLine();
            output.println(nombreUsuario); // Enviar nombre de usuario al servidor
            
            // Paso 3: Confirmación de conexión
            System.out.println("Conectado. Pulsa 'Intro' para abrir el popup de mensajería o escribe comandos directamente.");
            
            // Paso 4: Bucle principal de interacción
            while (true) {
                String inputLine = consoleInput.readLine();
                
                if (inputLine == null || inputLine.trim().isEmpty()) {
                    // Abrir popup de mensajería
                    String mensaje = JOptionPane.showInputDialog(null, "Escribe tu mensaje:", "Enviar mensaje",
                            JOptionPane.PLAIN_MESSAGE);

                    if (mensaje == null || mensaje.trim().isEmpty()) {
                        System.out.println("No se envió ningún mensaje.");
                        continue;
                    }
                    output.println(mensaje);
                } else {
                    // Manejar comandos y mensajes
                    output.println(inputLine);
                    if (inputLine.equalsIgnoreCase("exit")) {
                        break;
                    }
                }
            }
        } catch (IOException e) {
            System.err.println("Error al leer entrada de consola: " + e.getMessage());
        }
    }


    public static void main(String[] args) {
        try (BufferedReader consoleInput = new BufferedReader(new InputStreamReader(System.in))) {
            System.out.print("Introduce la IP del servidor (localhost): ");
            String serverIp = consoleInput.readLine();
            System.out.print("Introduce el puerto del servidor (5000): ");
            int serverPort = Integer.parseInt(consoleInput.readLine());

            new Cliente(serverIp, serverPort);
        } catch (IOException e) {
            System.err.println("Error en la entrada del cliente: " + e.getMessage());
        }
    }
}
