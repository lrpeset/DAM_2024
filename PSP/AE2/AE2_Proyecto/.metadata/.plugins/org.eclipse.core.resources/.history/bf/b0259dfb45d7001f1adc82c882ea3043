package es.psp.ae2;

import java.io.*;
import java.net.*;
import javax.swing.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

public class Cliente {
	private Socket socket;
	private BufferedReader input;
	private PrintWriter output;

	public Cliente(String serverIp, int serverPort) {
		try {
			socket = new Socket(serverIp, serverPort);
			input = new BufferedReader(new InputStreamReader(socket.getInputStream()));
			output = new PrintWriter(socket.getOutputStream(), true);

			System.out.println("Conectado al servidor en " + serverIp + ":" + serverPort);

			ClienteHilo receiver = new ClienteHilo(input);
			Thread receiverThread = new Thread(receiver);
			receiverThread.start();

			enviarMensajes();
		} catch (IOException e) {
			System.err.println("Error al conectar al servidor: " + e.getMessage());
		}
	}

	private void enviarMensajes() {
	    try {
	        BufferedReader consoleInput = new BufferedReader(new InputStreamReader(System.in));
	        while (true) {
	            String inputLine = consoleInput.readLine();

	            if (inputLine == null || inputLine.trim().isEmpty()) {
	                // Si no se ingresa nada en la consola, abrir la ventana para enviar un mensaje
	                String mensaje = JOptionPane.showInputDialog(null, "Escribe tu mensaje:", "Enviar mensaje", JOptionPane.PLAIN_MESSAGE);

	                if (mensaje == null || mensaje.trim().isEmpty()) {
	                    System.out.println("No se envió ningún mensaje.");
	                    continue;
	                }

	                // Manejo de los comandos
	                if (mensaje.equalsIgnoreCase("whois")) {
	                    output.println("whois");
	                    continue;
	                } else if (mensaje.equalsIgnoreCase("channels")) {
	                    output.println("channels");
	                    continue;
	                } else if (mensaje.equalsIgnoreCase("exit")) {
	                    output.println("exit");
	                    break;
	                } else if (mensaje.startsWith("@canal")) {
	                    // Asegúrate de que haya algo después de '@canal'
	                    if (mensaje.length() > 7) {  // '@canal' tiene 7 caracteres, por lo que debe haber algo después
	                        // Extraemos el número del canal después de '@canal'
	                        String canalDestino = mensaje.substring(7, mensaje.indexOf(" ", 7)).trim(); // Extrae el número del canal
	                        String mensajeCanal = mensaje.substring(mensaje.indexOf(" ", 7) + 1).trim();  // El resto es el mensaje

	                        if (canalDestino.isEmpty() || mensajeCanal.isEmpty()) {
	                            System.out.println("El formato de mensaje para '@canalX' no es válido. Ejemplo: @canal2 mensaje");
	                            continue;
	                        }

	                        // Enviar el mensaje al servidor con el formato esperado
	                        output.println("@canal" + canalDestino + " " + mensajeCanal);
	                    } else {
	                        System.out.println("El comando '@canal' debe ser seguido por el número del canal y el mensaje. Ejemplo: @canal2 mensaje");
	                        continue;
	             
	                    }
	           
	                } else {
	                    // Si no es un comando especial, simplemente enviar el mensaje normal
	                    String timestamp = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
	                    output.println(mensaje);
	                    System.out.println("[" + timestamp + "] Tú: " + mensaje);
	                }
	            }
	        }
	    } catch (IOException e) {
	        System.err.println("Error al leer entrada de consola: " + e.getMessage());
	    }
	}




	public static void main(String[] args) {
		try {
			BufferedReader consoleInput = new BufferedReader(new InputStreamReader(System.in));

			System.out.print("Introduce la IP del servidor (localhost): ");
			String serverIp = consoleInput.readLine();

			System.out.print("Introduce el puerto del servidor (5000): ");
			int serverPort = Integer.parseInt(consoleInput.readLine());

			new Cliente(serverIp, serverPort);
		} catch (IOException e) {
			System.err.println("Error en la entrada del cliente: " + e.getMessage());
		}
	}
}
