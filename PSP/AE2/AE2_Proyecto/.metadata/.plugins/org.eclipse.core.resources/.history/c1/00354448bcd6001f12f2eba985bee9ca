package es.psp.ae2;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.List;

class ServidorHilo implements Runnable {
    private Socket socket;
    private BufferedReader reader;
    private PrintWriter writer;
    private String canal;
    private String username;

    public ServidorHilo(Socket socket) {
        this.socket = socket;
    }

    @Override
    public void run() {
        try {
            reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            writer = new PrintWriter(socket.getOutputStream(), true);

            // Enviar canales al cliente
            Servidor.getCanales().keySet().forEach(writer::println);
            writer.println("END");

            // Seleccionar canal
            canal = reader.readLine();
            if (!Servidor.getCanales().containsKey(canal)) {
                socket.close();
                return;
            }

            // Validar nombre de usuario
            List<ServidorHilo> usuariosCanal = Servidor.getCanales().get(canal);
            do {
                username = reader.readLine();
                synchronized (usuariosCanal) {
                    boolean exists = usuariosCanal.stream().anyMatch(h -> h.username.equals(username));
                    if (exists) {
                        writer.println("Nombre ya en uso. Elija otro.");
                    } else {
                        usuariosCanal.add(this);
                        writer.println("OK");
                        break;
                    }
                }
            } while (true);

            // Manejo de mensajes
            String mensaje;
            while ((mensaje = reader.readLine()) != null) {
                if (mensaje.equals("whois")) {
                    String listaUsuarios = String.join(", ", usuariosCanal.stream().map(h -> h.username).toList());
                    writer.println("Usuarios en el canal: " + listaUsuarios);
                } else if (mensaje.equals("channels")) {
                    writer.println("Canales disponibles: " + String.join(", ", Servidor.getCanales().keySet()));
                } else if (mensaje.startsWith("@")) {
                    String[] parts = mensaje.split(" ", 2);
                    String canalDestino = parts[0].substring(1);
                    String msg = parts.length > 1 ? parts[1] : "";
                    enviarAMiembros(canalDestino, "[" + username + "]: " + msg);
                } else {
                    enviarAMiembros(canal, "[" + username + "]: " + mensaje);
                }
            }
        } catch (IOException e) {
            System.err.println("Cliente desconectado.");
        } finally {
            desconectar();
        }
    }

    private void enviarAMiembros(String canal, String mensaje) {
        List<ServidorHilo> usuariosCanal = Servidor.getCanales().get(canal);
        if (usuariosCanal != null) {
            synchronized (usuariosCanal) {
                for (ServidorHilo usuario : usuariosCanal) {
                    usuario.writer.println(mensaje);
                }
            }
        }
    }

    private void desconectar() {
        if (canal != null && username != null) {
            List<ServidorHilo> usuariosCanal = Servidor.getCanales().get(canal);
            synchronized (usuariosCanal) {
                usuariosCanal.remove(this);
            }
        }
        try {
            socket.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
