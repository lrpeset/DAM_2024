package es.psp.ae2;

import java.io.*;
import java.net.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;

public class ServidorHilo implements Runnable {
    private Socket clienteSocket;
    private BufferedReader input;
    private PrintWriter output;
    private Map<String, List<ServidorHilo>> canales;
    private String canalActual;
    private String nombreUsuario;

    public ServidorHilo(Socket clienteSocket, Map<String, List<ServidorHilo>> canales) {
        this.clienteSocket = clienteSocket;
        this.canales = canales;
    }

    @Override
    public void run() {
        try {
            input = new BufferedReader(new InputStreamReader(clienteSocket.getInputStream()));
            output = new PrintWriter(clienteSocket.getOutputStream(), true);

            // Mostrar canales disponibles al cliente
            output.println("Canales disponibles:");
            for (String canal : canales.keySet()) {
                output.println(canal);
            }

            // Solicitar selecci칩n de canal
            output.println("Selecciona un canal:");
            canalActual = input.readLine();
            if (!canales.containsKey(canalActual)) {
                output.println("Canal no v치lido. Desconectando.");
                cerrarConexion();
                return;
            }

            // Solicitar nombre de usuario y validarlo
            output.println("Introduce tu nombre de usuario:");
            while (true) {
                nombreUsuario = input.readLine();
                synchronized (canales.get(canalActual)) {
                    boolean existe = canales.get(canalActual).stream()
                            .anyMatch(hilo -> hilo.nombreUsuario.equals(nombreUsuario));
                    if (!existe) {
                        canales.get(canalActual).add(this);
                        break;
                    }
                }
                output.println("Nombre de usuario ya en uso. Por favor, elige otro:");
            }

            // Confirmar conexi칩n al canal
            output.println("Conexi칩n exitosa al canal: " + canalActual);
            enviarATodos("Usuario " + nombreUsuario + " se ha unido al canal.");

            // Manejar mensajes del cliente
            String mensaje;
            while ((mensaje = input.readLine()) != null) {
                String timestamp = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
                String mensajeFormateado = "[" + timestamp + "] " + nombreUsuario + ": " + mensaje;
                enviarATodos(mensajeFormateado);
            }
        } catch (IOException e) {
            System.err.println("Error con el cliente: " + e.getMessage());
        } finally {
            desconectar();
        }
    }

    private void enviarATodos(String mensaje) {
        synchronized (canales.get(canalActual)) {
            for (ServidorHilo hilo : canales.get(canalActual)) {
                hilo.output.println(mensaje);
            }
        }
    }

    private void desconectar() {
        try {
            synchronized (canales.get(canalActual)) {
                canales.get(canalActual).remove(this);
                enviarATodos("Usuario " + nombreUsuario + " ha abandonado el canal.");
            }
            cerrarConexion();
        } catch (Exception e) {
            System.err.println("Error al desconectar cliente: " + e.getMessage());
        }
    }

    private void cerrarConexion() throws IOException {
        if (clienteSocket != null) clienteSocket.close();
        if (input != null) input.close();
        if (output != null) output.close();
    }
}
