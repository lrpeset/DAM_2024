package es.psp.ae2;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.List;
import java.util.Map;
import java.util.ArrayList;
import java.util.Collections;

public class ServerThread extends Thread {
    private Socket socket;
    private BufferedReader reader;
    private PrintWriter writer;
    private Map<String, List<ServerThread>> channels;
    private String currentChannel;
    private String userName;

    public ServerThread(Socket socket, Map<String, List<ServerThread>> channels) {
        this.socket = socket;
        this.channels = channels;
    }

    @Override
    public void run() {
        try {
            reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            writer = new PrintWriter(socket.getOutputStream(), true);

            // Crear una lista auxiliar para traducir índices a nombres de canales
            List<String> channelKeys = new ArrayList<>(channels.keySet());
            Collections.sort(channelKeys); // Asegurar orden consistente

            // Enviar lista de canales al cliente
            writer.println("Selecciona un canal:");
            for (int i = 0; i < channelKeys.size(); i++) {
                writer.println((i + 1) + "- " + channelKeys.get(i)); // Mostrar índices y nombres
            }

            // Leer la selección de canal del cliente
            String clientMessage = reader.readLine();
            String channelName = null;

            // Procesar selección de canal
            try {
                int channelIndex = Integer.parseInt(clientMessage.trim()) - 1; // Ajustar a índice 0
                if (channelIndex >= 0 && channelIndex < channelKeys.size()) {
                    channelName = channelKeys.get(channelIndex);
                } else {
                    writer.println("Canal inválido. Selección fuera de rango.");
                    disconnect();
                    return;
                }
            } catch (NumberFormatException e) {
                writer.println("Entrada inválida. Debes ingresar un número.");
                disconnect();
                return;
            }

            // Verificar canal y agregar cliente a la lista del canal
            synchronized (channels) {
                if (!channels.containsKey(channelName)) {
                    writer.println("Canal no encontrado. Error interno.");
                    disconnect();
                    return;
                }
                channels.get(channelName).add(this); // Añadir el hilo actual a la lista del canal
            }

            currentChannel = channelName; // Establecer el canal actual del cliente
            writer.println("Unido al canal " + channelName);

            // Solicitar nombre de usuario
            writer.println("Indica tu nombre de usuario:");
            String userName = reader.readLine().trim();

            // Validar que el nombre de usuario no esté en uso
            while (isUserNameTaken(userName)) {
                writer.println("El usuario ya existe, indica otro:");
                userName = reader.readLine().trim();
            }

            // Añadir usuario a la lista de participantes del canal
            addUserToChannel(userName);

            writer.println("Bienvenido, " + userName + ". Ahora puedes empezar a chatear.");

            // Lógica para escuchar los mensajes y procesarlos
            String message;
            while ((message = reader.readLine()) != null) {
                if ("exit".equalsIgnoreCase(message.trim())) {
                    writer.println("Saliendo del canal...");
                    disconnect();
                    return;
                }

                // Aquí puedes agregar lógica para manejar otros tipos de mensajes

                // Por ejemplo, enviar mensajes a todos los usuarios del canal
                if (message.equalsIgnoreCase("whois")) {
                    sendWhoIsMessage();
                } else if (message.startsWith("@")) {
                    sendDirectMessage(message);
                } else {
                    sendMessageToChannel(message);
                }
            }
        } catch (IOException e) {
            System.err.println("Error en la conexión con el cliente: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void sendMessageToChannel(String message) {
        synchronized (channels) {
            for (ServerThread clientThread : channels.get(currentChannel)) {
                clientThread.writer.println("[" + getTimestamp() + "] " + userName + ": " + message);
            }
        }
    }

    private void sendDirectMessage(String message) {
        // Obtener el nombre del canal desde el mensaje
        String[] messageParts = message.split(" ", 2);
        if (messageParts.length > 1) {
            String targetChannel = messageParts[0].substring(1); // Remover el '@'
            String directMessage = messageParts[1];
            if (channels.containsKey(targetChannel)) {
                synchronized (channels) {
                    for (ServerThread clientThread : channels.get(targetChannel)) {
                        clientThread.writer.println("[" + getTimestamp() + "] " + userName + " (directo): " + directMessage);
                    }
                }
            } else {
                writer.println("Canal " + targetChannel + " no encontrado.");
            }
        }
    }

    private void sendWhoIsMessage() {
        StringBuilder message = new StringBuilder("Usuarios en el canal " + currentChannel + ": ");
        synchronized (channels) {
            for (ServerThread clientThread : channels.get(currentChannel)) {
                message.append(clientThread.userName).append(", ");
            }
        }
        writer.println(message.toString());
    }

    private boolean isUserNameTaken(String userName) {
        synchronized (channels) {
            for (ServerThread clientThread : channels.get(currentChannel)) {
                if (clientThread.userName.equalsIgnoreCase(userName)) {
                    return true;
                }
            }
        }
        return false;
    }

    private void addUserToChannel(String userName) {
        this.userName = userName;
        // Puedes agregar un mensaje de bienvenida personalizado
    }

    private String getTimestamp() {
        return new java.text.SimpleDateFormat("HH:mm:ss").format(new java.util.Date());
    }
    
    private void sendAvailableChannels() {
        StringBuilder channelList = new StringBuilder();
        channels.keySet().forEach(channel -> {
            channelList.append(channel).append("\n");
        });
        out.println("Canales disponibles:\n" + channelList.toString());
        out.flush();
    }

    private void disconnect() {
        try {
            // Verificar si el canal existe antes de intentar eliminar al cliente
            if (currentChannel != null && channels.containsKey(currentChannel)) {
                synchronized (channels) {
                    List<ServerThread> channelList = channels.get(currentChannel);
                    if (channelList != null) {
                        channelList.remove(this); // Eliminar al cliente de la lista del canal
                    }
                }
            }
            if (socket != null && !socket.isClosed()) {
                socket.close();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

}
