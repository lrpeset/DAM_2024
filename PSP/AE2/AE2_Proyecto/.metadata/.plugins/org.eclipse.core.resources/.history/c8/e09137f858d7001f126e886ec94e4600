package es.psp.ae2;

import java.io.*;
import java.net.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;

public class ServidorHilo implements Runnable {
    private final Socket clienteSocket;
    private final Map<String, List<ServidorHilo>> canales;
    private BufferedReader input;
    private PrintWriter output;
    private String canalActual;
    private String nombreUsuario;

    public ServidorHilo(Socket clienteSocket, Map<String, List<ServidorHilo>> canales) {
        this.clienteSocket = clienteSocket;
        this.canales = canales;
    }

    @Override
    public void run() {
        try {
            inicializarConexiones();
            seleccionarCanal();
            registrarUsuario();

            String mensaje;
            while ((mensaje = input.readLine()) != null) {
                procesarMensaje(mensaje);
            }
        } catch (IOException e) {
            System.err.println("Error con el cliente: " + e.getMessage());
        } finally {
            desconectar();
        }
    }

    private void inicializarConexiones() throws IOException {
        input = new BufferedReader(new InputStreamReader(clienteSocket.getInputStream()));
        output = new PrintWriter(clienteSocket.getOutputStream(), true);
    }

    private void seleccionarCanal() throws IOException {
        output.println("Canales disponibles:");
        List<String> canalList = new ArrayList<>(canales.keySet());

        if (canalList.isEmpty()) {
            output.println("No hay canales disponibles. Desconectando.");
            cerrarConexion();
            return;
        }
        for (int i = 0; i < canalList.size(); i++) {
            output.println((i + 1) + "- " + canalList.get(i));
        }
        output.println("Selecciona un canal (número):");
        String canalSeleccionado = input.readLine().trim();

        try {
            int canalIndice = Integer.parseInt(canalSeleccionado) - 1;
            if (canalIndice < 0 || canalIndice >= canalList.size()) {
                throw new NumberFormatException();
            }

            canalActual = canalList.get(canalIndice);
            output.println("Te has conectado al canal: " + canalActual);
        } catch (NumberFormatException e) {
            output.println("Selección de canal no válida. Desconectando.");
            cerrarConexion();
        }
    }


    private void registrarUsuario() throws IOException {
        output.println("Introduce tu nombre de usuario:");
        while (true) {
            nombreUsuario = input.readLine();
            synchronized (canales.get(canalActual)) {
                boolean existe = canales.get(canalActual).stream()
                        .anyMatch(hilo -> hilo.nombreUsuario.equals(nombreUsuario));
                if (!existe) {
                    canales.get(canalActual).add(this);
                    break;
                }
            }
            output.println("Nombre de usuario ya en uso. Por favor, elige otro:");
        }
        output.println("Conexión exitosa al canal: " + canalActual);
        enviarATodos("Usuario " + nombreUsuario + " se ha unido al canal.");
    }

    private void procesarMensaje(String mensaje) {
        if (mensaje.equalsIgnoreCase("whois")) {
            enviarATodos("Usuarios conectados al canal " + canalActual + ": " + obtenerUsuarios());
        } else if (mensaje.equalsIgnoreCase("channels")) {
            output.println("Canales disponibles: " + canales.keySet());
        } else if (mensaje.equalsIgnoreCase("exit")) {
            enviarATodos("Usuario " + nombreUsuario + " ha abandonado el canal.");
            desconectar();
        } else if (mensaje.startsWith("@canal")) {
            reenviarMensajeACanal(mensaje);
        } else {
            enviarATodos(formatMensaje(mensaje));
        }
    }

    private String obtenerUsuarios() {
        return canales.get(canalActual).stream().map(h -> h.nombreUsuario).toList().toString();
    }

    private void reenviarMensajeACanal(String mensaje) {
        String[] partes = mensaje.substring(6).trim().split(" ", 2);
        if (partes.length == 2) {
            String canalDestino = partes[0];
            String mensajeCanal = partes[1];

            if (canales.containsKey(canalDestino)) {
                enviarATodosCanal(canalDestino, "[" + nombreUsuario + "] " + mensajeCanal);
            } else {
                output.println("Canal " + canalDestino + " no encontrado.");
            }
        } else {
            output.println("Formato incorrecto. Uso correcto: @canalX mensaje.");
        }
    }

    private String formatMensaje(String mensaje) {
        return "[" + LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")) + "] " + nombreUsuario + ": " + mensaje;
    }

    private void enviarATodos(String mensaje) {
        synchronized (canales.get(canalActual)) {
            canales.get(canalActual).forEach(h -> h.output.println(mensaje));
        }
    }

    private void enviarATodosCanal(String canalDestino, String mensaje) {
        synchronized (canales.get(canalDestino)) {
            canales.get(canalDestino).forEach(h -> h.output.println("[Canal " + canalDestino + "] " + mensaje));
        }
    }

    private void desconectar() {
        try {
            synchronized (canales.get(canalActual)) {
                canales.get(canalActual).remove(this);
                enviarATodos("Usuario " + nombreUsuario + " ha abandonado el canal " + canalActual + ".");
            }
            cerrarConexion();
        } catch (Exception e) {
            System.err.println("Error al desconectar cliente: " + e.getMessage());
        }
    }

    private void cerrarConexion() throws IOException {
        if (clienteSocket != null) clienteSocket.close();
        if (input != null) input.close();
        if (output != null) output.close();
    }
}
