package es.psp.ae2;

import java.io.*;
import java.net.*;
import java.util.*;

public class ServidorHilo implements Runnable {
    private BufferedReader input;
    private PrintWriter output;
    private Socket clienteSocket;
    private String canal;
    private String username;

    public ServidorHilo(Socket socket) {
        this.clienteSocket = socket;
        try {
            this.input = new BufferedReader(new InputStreamReader(clienteSocket.getInputStream()));
            this.output = new PrintWriter(clienteSocket.getOutputStream(), true);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void run() {
        try {
            // Enviar lista de canales disponibles
            List<String> canales = Servidor.obtenerCanales();
            output.println("Canales disponibles:");
            for (String canal : canales) {
                output.println(canal);
            }

            // Solicitar elección de canal y nombre de usuario
            String canalSeleccionado = input.readLine();
            int canalIndex = Integer.parseInt(canalSeleccionado) - 1;

            if (canalIndex >= 0 && canalIndex < canales.size()) {
                canal = canales.get(canalIndex);
                output.println("Introduce tu nombre de usuario:");

                username = input.readLine();

                if (!Servidor.verificarNombreUsuario(username)) {
                    output.println("El nombre de usuario ya está en uso.");
                } else {
                    Servidor.enviarAMensajesCanal(canal, username + " se ha unido al canal " + canal);
                    output.println("OK");
                }
            } else {
                output.println("Canal no válido.");
            }

            // Esperar mensajes del cliente
            String mensaje;
            while ((mensaje = input.readLine()) != null) {
                if (mensaje.equals("exit")) {
                    break;
                } else if (mensaje.equals("whois")) {
                    output.println("Usuarios conectados en el canal " + canal + ": " + Servidor.obtenerUsuariosCanal(canal));
                } else if (mensaje.equals("channels")) {
                    output.println("Canales disponibles: " + Servidor.obtenerCanales());
                } else {
                    Servidor.enviarAMensajesCanal(canal, username + ": " + mensaje);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                clienteSocket.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
}
