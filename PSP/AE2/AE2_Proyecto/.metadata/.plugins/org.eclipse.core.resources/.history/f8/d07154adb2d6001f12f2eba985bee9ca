package es.psp.ae2;

import java.io.*;
import java.net.*;
import java.util.*;

public class ServidorHilo extends Thread {
    private BufferedReader input;
    private PrintWriter output;
    private Socket clienteSocket;

    // Mapa global para almacenar los usuarios conectados a cada canal
    private static Map<String, List<String>> canalesConectados = new HashMap<>();

    public ServidorHilo(Socket socket) {
        this.clienteSocket = socket;
        try {
            this.input = new BufferedReader(new InputStreamReader(clienteSocket.getInputStream()));
            this.output = new PrintWriter(clienteSocket.getOutputStream(), true);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void run() {
        try {
            // Leemos los canales desde el archivo
            List<String> canales = leerCanales();
            
            // Enviar los canales al cliente
            salida.println("Canales disponibles:");
            for (int i = 0; i < canales.size(); i++) {
                salida.println((i + 1) + "- " + canales.get(i));
            }

            // Esperamos a que el cliente seleccione un canal
            String canalSeleccionado = entrada.readLine();
            int canalIndex = Integer.parseInt(canalSeleccionado) - 1;

            // Verificar si el canal seleccionado es válido
            if (canalIndex >= 0 && canalIndex < canales.size()) {
                salida.println("Has seleccionado el canal: " + canales.get(canalIndex));
                // Aquí deberías continuar con el flujo para pedir el nombre de usuario

                salida.println("Introduce tu nombre de usuario: ");
                String nombreUsuario = entrada.readLine();  // Leer nombre de usuario

                // Aquí podrías almacenar el nombre de usuario o continuar con el flujo del juego
                // ...
            } else {
                salida.println("Canal no encontrado. Por favor elige un canal válido.");
            }
            
        } catch (IOException e) {
            e.printStackTrace();
        }
    }


    private List<String> leerCanales() {
        List<String> canales = new ArrayList<>();
        // Cargar los canales desde un archivo o de una fuente específica
        try (BufferedReader br = new BufferedReader(new FileReader("src/channels.txt"))) {
            String line;
            while ((line = br.readLine()) != null) {
                // Verificar que la línea tenga un guion (-)
                if (line.contains("-")) {
                    String[] parts = line.split("-");
                    if (parts.length > 1) {  // Asegurarse de que haya al menos dos elementos
                        canales.add(parts[1].trim());  // Obtener solo el nombre del canal
                    } else {
                        System.out.println("Formato incorrecto en la línea: " + line);
                    }
                } else {
                    System.out.println("Formato incorrecto en la línea: " + line);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return canales;
    }

}
